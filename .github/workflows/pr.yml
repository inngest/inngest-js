name: PR checks

on:
  pull_request:
  workflow_dispatch:
  workflow_call:

concurrency:
  group: pr-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_AUTH_TOKEN: nothing

jobs:
  ci-image:
    name: Upsert CI image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.ensure.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - id: ensure
        uses: ./.github/actions/ensure-ci-image
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  # A flag we can use to warn us of critical known issues in the chain. This
  # should be caught in a number of places (including GitHub as CVEs), but we
  # also perform a check here.
  audit:
    name: pnpm security audit
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      # Optional dependencies are packages like frameworks, which are actually
      # peer dependencies and are not installed in every usage, so we omit them
      # here and only check what's shipped directly by us.
      - run: pnpm audit --audit-level=critical --prod --no-optional

  # TODO node switching
  inngest_test:
    name: "inngest: Runtime tests"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/inngest
    strategy:
      fail-fast: false
      matrix:
        nodeVersion:
          - 20
          - 22
          - 24
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm build
        working-directory: packages/test
      - run: |
          node --version
          npm --version
          pnpm run prebuild
          npm run test

  inngest_types:
    name: "inngest: Type tests"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/inngest
    strategy:
      fail-fast: false
      matrix:
        tsVersion:
          - "latest"
          - "~5.9.0"
          - "~5.8.0"
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm add -D typescript@${{ matrix.tsVersion }}
      - run: pnpm run test:types
      - run: pnpm run test:dist

  inngest_package_health:
    name: "inngest: Package health"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/inngest
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm run local:pack

      - name: Lint package publishing config
        id: publint
        continue-on-error: true
        run: pnpm dlx publint --pack npm ./dist

      - name: Check publishing types health
        id: typescheck
        continue-on-error: true
        run: pnpm dlx @arethetypeswrong/cli inngest.tgz

      - name: Fail if any checks failed
        if: steps.publint.outcome != 'success' || steps.typescheck.outcome != 'success'
        run: exit 1

  inngest_lint:
    name: "inngest: Lint"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/inngest
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm run lint

  inngest_test_deps:
    name: "inngest: Dependency tests"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/inngest
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm run test:deps

  inngest_test_composite:
    name: "inngest: Composite tests"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/inngest
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm run test:composite

  "eslint-plugin_test":
    name: "eslint-plugin: Test"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/eslint-plugin
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm test

  "middleware-encryption_test":
    name: "middleware-encryption: Test"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/middleware-encryption
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm test

  "middleware-validation_test":
    name: "middleware-validation: Test"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/middleware-validation
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm run build
        working-directory: packages/test
      - run: pnpm test

  "realtime_test":
    name: "realtime: Test"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/realtime
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - run: pnpm test

  package_inngest:
    name: "inngest: Package"
    runs-on: ubuntu-latest
    needs: ci-image
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/inngest
    steps:
      - uses: actions/checkout@v4
      - run: pnpm install --frozen-lockfile
      - name: Package as tarball
        run: pnpm run local:pack
      - name: Archive package tarball
        uses: actions/upload-artifact@v4
        with:
          name: inngestpkg
          path: packages/inngest/inngest.tgz

  examples-matrix:
    name: Create examples test matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: matrix
        run: |
          blocklist=$(grep -v '^#' examples/.inngestignore | jq -R . | jq -s .)
          echo "matrix=$(find examples -mindepth 1 -maxdepth 1 -type d \( -name 'framework-*' -or -name 'bun*' \) | grep -v -f <(echo $blocklist | jq -r '.[]') | xargs -n 1 basename | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  examples:
    name: Test examples
    runs-on: ubuntu-latest
    needs: [ci-image, examples-matrix, package_inngest]
    container:
      image: ${{ needs.ci-image.outputs.image }}
    defaults:
      run:
        working-directory: packages/inngest
    strategy:
      fail-fast: false
      matrix:
        example: ${{ fromJson(needs.examples-matrix.outputs.matrix) }}
        streaming: [""]
        include:
          - example: framework-remix
            streaming: force
          - example: framework-nextjs-app-router
            streaming: force
          - example: node
            streaming: force
          - example: framework-express
            streaming: force
        exclude:
          - example: framework-nextjs-starter
          - example: framework-hono
    steps:
      # Checkout the repo
      - name: Checkout SDK
        uses: actions/checkout@v4

      - name: Download pre-built SDK
        uses: actions/download-artifact@v4
        with:
          name: inngestpkg
          path: packages/inngest

      - name: Run integration tests
        run: pnpm run itest ${{ matrix.example }}
        env:
          INNGEST_STREAMING: ${{ matrix.streaming }}
